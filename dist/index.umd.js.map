{"version":3,"file":"index.umd.js","sources":["../src/models/block.ts","../src/models/txn.ts","../src/models/spend.ts","../src/models/txo.ts","../src/block-headers.ts","../src/index.ts","../src/models/address.ts"],"sourcesContent":["\nexport class Block {\n    constructor(public height = Date.now(), public idx = 0n, public hash = '') {}\n\n    toJSON() {\n        return {\n            height: this.height,\n            idx: this.idx.toString(),\n            hash: this.hash,\n        }\n    }\n}","import type { Block } from \"./block\"\n\nexport enum TxnStatus {\n    INVALID = -1,\n    PENDING = 0,\n    BROADCASTED = 1,\n    CONFIRMED = 2,\n}\n\nexport interface Txn {\n    txid: string\n    rawtx: Uint8Array\n    proof: Uint8Array\n    block?: Block\n    status: TxnStatus\n}","import { Block } from \"./block\";\n\nexport class Spend {\n    constructor(public txid: string, public vin: number, public block?: Block) {}\n\n    toJSON() {\n        return {\n            txid: this.txid,\n            vin: this.vin,\n            block: this.block?.toJSON(),\n        }\n    }\n}","import { Block } from \"./block\"\nimport { IndexData } from \"./index-data\"\nimport type { Indexer } from \"./indexer\"\nimport { Spend } from \"./spend\"\nimport { Buffer } from 'buffer'\n\nexport class Txo {\n    block?: Block\n    spend?: Spend\n    data: { [tag: string]: IndexData } = {}\n    events: string[] = []\n    owner = ''\n\n    constructor(\n        public txid: string,\n        public vout: number,\n        public satoshis: bigint,\n        public script: Uint8Array,\n    ) { }\n\n    static fromObject(obj: any, indexers: Indexer[] = []): Txo {\n        const txo = new Txo(obj.txid, obj.vout, obj.satoshis, obj.script)\n        txo.block = obj.block && new Block(obj.block.height, obj.block.idx, obj.block.hash)\n        txo.spend = obj.spend && new Spend(obj.spend.txid, obj.spend.vin, obj.spend.block && new Block(obj.spend.block.height, obj.spend.block.idx, obj.spend.block.hash))\n        txo.owner = obj.owner\n        for(let idx of indexers) {\n            if (obj.data[idx.tag]) {\n                txo.data[idx.tag] = idx.fromObj(obj.data[idx.tag])\n            }\n        }\n\n        txo.events = obj.events\n        return txo\n    }\n\n    toJSON() {\n        return {\n            ...this,\n            script: Buffer.from(this.script).toString('base64'),\n            satoshis: this.satoshis.toString(),\n            owner: this.owner,\n            data: Object.entries(this.data).reduce((acc: {[tag:string]:any}, [tag, data]) => {\n                acc[tag] = data.data\n                return acc\n            }, {}),\n            events: this.events,\n        }\n    }\n}\n\nexport class TxoLookup {\n    constructor(\n        public indexer: string, \n        public id?: string,\n        public value?: string,\n        public spent?: boolean, \n        public owner?: string\n    ) { }\n\n    toQueryKey(): string {\n        return TxoLookup.buildQueryKey(this.indexer, this.id, this.value, this.spent)\n    }\n\n    static buildQueryKey(tag: string, id?: string, value?: string, spent?: boolean): string {\n        let key = `${tag}`\n        if (id) {\n            key += `:${id}`\n            if (value) {\n                key += `:${value}`\n                if (spent !== undefined) {\n                    key += `:${spent ? '1' : '0'}`\n                }\n            }\n        }\n        return key\n    }\n}\n\nexport interface TxoResults {\n    txos: Txo[]\n    nextPage?: string\n}","import type { ChainTracker } from \"@bsv/sdk\";\nimport { openDB, type DBSchema, type IDBPDatabase } from \"@tempfix/idb\";\n\nconst VERSION = 1\nconst PAGE_SIZE = 10000\n\nexport interface BlockHeader {\n    hash: string\n    height: number\n    version: number\n    prevHash: string\n    merkleroot: string\n    time: number\n    bits: number\n    nonce: number\n}\n\nexport interface BlockSchema extends DBSchema {\n    headers: {\n        key: number;\n        value: BlockHeader;\n        indexes: {\n            byHash: string;\n        }\n    }\n}\n\nexport class BlockHeaderService implements ChainTracker{\n    db: Promise<IDBPDatabase<BlockSchema>>\n    syncInProgress = false\n    constructor() {\n        this.db = openDB<BlockSchema>(`blocks`, VERSION, {\n            upgrade(db) {\n                const headers = db.createObjectStore('headers', { keyPath: 'height' })\n                headers.createIndex('byHash', 'hash')\n            }\n        })\n    }\n\n    async syncBlocks() {\n        if (this.syncInProgress) return\n        this.syncInProgress = true\n        let lastHeight = 1\n        const db = await this.db\n        const cursor = await db.transaction('headers').store.openCursor(null, 'prev')\n        if (cursor) {\n            lastHeight = cursor.key > 5 ? cursor.key - 5 : 1\n        }\n\n        try {\n            let resp = await fetch(`https://ordinals.gorillapool.io/api/blocks/list/${lastHeight}?limit=${PAGE_SIZE}`)\n            let blocks = await resp.json() as BlockHeader[]\n            do {\n                console.log('Syncing from', lastHeight)\n                const t = db.transaction('headers', 'readwrite')\n                for (let block of blocks) {\n                    t.store.put(block)\n                    lastHeight = block.height + 1\n                }\n                await t.done\n                resp = await fetch(`https://ordinals.gorillapool.io/api/blocks/list/${lastHeight}?limit=${PAGE_SIZE}`)\n                blocks = await resp.json() as BlockHeader[]\n            } while (blocks.length == PAGE_SIZE)\n        } catch (e) {\n            console.error(e)\n        } finally {\n            this.syncInProgress = false\n            setTimeout(() => this.syncBlocks(), 1000 * 60)\n        }\n    }\n\n    async isValidRootForHeight(root: string, height: number): Promise<boolean> {\n        const db = await this.db\n        const block = await db.get('headers', height)\n        return block?.merkleroot == root\n    }\n\n    async getHashByHeight(height: number): Promise<string | undefined> {\n        const db = await this.db\n        return (await db.get('headers', height))?.hash\n    }\n\n    async getHeightByHash(hash: string): Promise<number | undefined> {\n        const db = await this.db\n        return (await db.getFromIndex('headers', 'byHash', hash))?.height\n    }\n}","import { MerklePath, Transaction } from \"@bsv/sdk\";\nimport type { Indexer } from \"./models/indexer\";\nimport type { IndexContext } from \"./models/index-context\";\nimport { openDB, type DBSchema, type IDBPDatabase } from \"@tempfix/idb\";\nimport { Txo, TxoLookup, type TxoResults } from \"./models/txo\";\nimport { TxnStatus, type Txn } from \"./models/txn\";\nimport { BlockHeaderService } from \"./block-headers\";\nimport { Block } from \"./models/block\";\nimport { Spend } from \"./models/spend\";\nimport { Buffer } from 'buffer'\nimport { parseAddress } from \"./models/address\";\n\nconst VERSION = 1\n\nexport interface TxoSchema extends DBSchema {\n    txos: {\n        key: [string, number]\n        value: Txo\n        indexes: {\n            events: string\n            owner: string\n        }\n    }\n    txns: {\n        key: string\n        value: Txn\n    }\n}\n\nexport class TxoStore {\n    db: Promise<IDBPDatabase<TxoSchema>>\n    blocks = new BlockHeaderService()\n    constructor(\n        public accountId: string,\n        public indexers: Indexer[] = [],\n        public addresses = new Set<string>()\n    ) {\n        this.indexers.forEach(i => i.addresses = this.addresses)\n        this.db = openDB<TxoSchema>(`txostore-${accountId}`, VERSION, {\n            upgrade(db) {\n                const txos = db.createObjectStore('txos', { keyPath: ['txid', 'vout'] })\n                txos.createIndex('events', 'events', { multiEntry: true })\n                txos.createIndex('owner', 'owner')\n                db.createObjectStore('txns', { keyPath: 'txid' })\n            }\n        })\n    }\n\n    async getTx(txid: string, fromRemote = false): Promise<Transaction | undefined> {\n        let txn = await (await this.db).get('txns', txid)\n        if (txn) {\n            const tx = Transaction.fromBinary(Array.from(new Uint8Array(txn.rawtx)))\n            tx.merklePath = MerklePath.fromBinary(Array.from(txn.proof))\n            return tx\n        }\n        if (!fromRemote) return\n        console.log('Fetching', txid)\n        const [rawtx, proof] = await Promise.all([\n            fetch(`https://junglebus.gorillapool.io/v1/transaction/get/${txid}/bin`)\n                .then(resp => resp.arrayBuffer()),\n            fetch(`https://junglebus.gorillapool.io/v1/transaction/proof/${txid}`)\n                .then(resp => resp.arrayBuffer()),\n        ]);\n        const tx = Transaction.fromBinary(Array.from(new Uint8Array(rawtx)));\n        tx.merklePath = MerklePath.fromBinary(Array.from(new Uint8Array(proof)));\n        txn = {\n            txid,\n            rawtx: new Uint8Array(rawtx),\n            proof: new Uint8Array(proof),\n            block: new Block(\n                tx.merklePath.blockHeight,\n                BigInt(tx.merklePath.path[0].find(p => p.hash == txid)?.offset || 0)\n            ),\n            status: TxnStatus.CONFIRMED,\n        }\n        await (await this.db).put('txns', txn)\n        return tx\n    }\n\n    async getTxo(txid: string, vout: number): Promise<Txo | undefined> {\n        return (await this.db).get('txos', [txid, vout])\n    }\n\n    async searchTxos(lookup: TxoLookup, limit = 10, from?: string): Promise<TxoResults> {\n        const db = await this.db\n        let dbkey = lookup.toQueryKey()\n        const start = from || dbkey\n        const query: IDBKeyRange = IDBKeyRange.bound(start, dbkey + '\\uffff', true, false)\n        const results: TxoResults = { txos: [] }\n        console.time('findTxos')\n        for await (const cursor of db.transaction('txos').store.index('events').iterate(query)) {\n            const txo = Txo.fromObject(cursor.value, this.indexers)\n            results.nextPage = cursor.key\n            if (lookup.owner && txo.owner != lookup.owner) continue\n            results.txos.push(txo)\n            console.timeLog('findTxos', txo.txid, txo.vout)\n            if (results.txos.length >= limit) {\n                console.timeEnd('findTxos')\n                return results\n            }\n        }\n        delete results.nextPage\n        console.timeEnd('findTxos')\n        return results\n    }\n\n    async ingest(tx: Transaction, fromRemote = false): Promise<IndexContext> {\n        const txid = tx.id('hex') as string\n        let block = {\n            height: Date.now(),\n            idx: 0n\n        } as Block\n        if (tx.merklePath) {\n            const txHash = tx.hash('hex')\n            const idx = tx.merklePath.path[0].find(p => p.hash == txHash)?.offset || 0\n            block.height = tx.merklePath.blockHeight\n            block.idx = BigInt(idx)\n            block.hash = (await this.blocks.getHashByHeight(tx.merklePath.blockHeight)) || ''\n        }\n\n        const ctx: IndexContext = {\n            txid,\n            tx,\n            block,\n            spends: [],\n            txos: [],\n        }\n\n        for (const input of tx.inputs) {\n            if (!input.sourceTXID) input.sourceTXID = input.sourceTransaction!.id('hex') as string\n            if (input.sourceTransaction) {\n                if (await (await this.db).getKey('txns', input.sourceTXID)) {\n                    continue\n                }\n                await this.ingest(input.sourceTransaction)\n            } else {\n                input.sourceTransaction = await this.getTx(input.sourceTXID!, fromRemote)\n                if (!input.sourceTransaction) throw new Error(`Failed to get source tx ${input.sourceTXID!}`)\n            }\n        }\n\n        const t = (await this.db).transaction('txos', 'readwrite')\n        for await (const [vin, input] of tx.inputs.entries()) {\n            let data = await t.store.get([input.sourceTXID!, input.sourceOutputIndex])\n            const spend = data ?\n                Txo.fromObject(data, this.indexers) :\n                new Txo(\n                    input.sourceTXID!,\n                    input.sourceOutputIndex,\n                    BigInt(input.sourceTransaction!.outputs[input.sourceOutputIndex]!.satoshis!),\n                    Buffer.from(input.sourceTransaction!.outputs[input.sourceOutputIndex]!.lockingScript.toBinary()),\n                )\n\n            spend.spend = new Spend(txid, vin, block)\n            ctx.spends.push(spend)\n            t.store.put(spend)\n        }\n\n        for await (const [vout, output] of tx.outputs.entries()) {\n            let data = await t.store.get([txid, vout])\n            let txo: Txo\n            if(data) {\n                txo = Txo.fromObject(data)\n            } else {\n                const script = output.lockingScript.toBinary()\n                // console.log('script', output.lockingScript.toBinary())\n                txo = new Txo(\n                   txid,\n                   vout,\n                   BigInt(output.satoshis!),\n                   new Uint8Array(script),\n               )\n            }\n            if(!txo.owner) {\n                txo.owner = parseAddress(output.lockingScript, 0)\n            }\n\n            txo.block = block\n            txo.events = [];\n            ctx.txos.push(txo)\n            this.indexers.forEach(i => {\n                const data = i.parse && i.parse(ctx, vout)\n                if (data) {\n                    txo.data[i.tag] = data\n                }\n            })\n        }\n        this.indexers.forEach(i => i.save && i.save(ctx))\n        for (const txo of ctx.txos) {\n            txo.events = []\n            const spent = txo.spend ? '1' : '0'\n            const sort = (txo.spend?.block?.height || txo.block?.height || Date.now()).toString(16).padStart(8, '0')\n            if (txo.owner && this.addresses.has(txo.owner)) {\n                Object.entries(txo.data).forEach(([tag, data]) => {\n                    data.events.forEach(e => {\n                        txo.events.push(`${tag}:${e.id}:${e.value}:${spent}:${sort}:${txo.block?.idx}:${txo.vout}:${txo.satoshis}`)\n                    })\n                })\n            }\n            t.store.put(txo)\n        }\n        await t.done\n        return ctx\n    }\n}","import {OP, Utils, type Script} from \"@bsv/sdk\";\n\nexport function parseAddress(script: Script, offset: number = 0): string {\n    if (script.chunks[0 + offset]?.op === OP.OP_DUP &&\n        script.chunks[1 + offset]?.op === OP.OP_HASH160 &&\n        script.chunks[2 + offset]?.data?.length === 20 &&\n        script.chunks[3 + offset]?.op === OP.OP_EQUALVERIFY &&\n        script.chunks[4 + offset]?.op === OP.OP_CHECKSIG\n    ) {\n        return Utils.toBase58Check(script.chunks[2 + offset].data!, [0])\n    }\n    return \"\"\n}"],"names":["TxnStatus","Block","height","idx","hash","Date","now","this","prototype","toJSON","toString","Spend","txid","vin","block","_this$block","Txo","vout","satoshis","script","spend","data","events","owner","fromObject","obj","indexers","txo","_step","_iterator","_createForOfIteratorHelperLoose","done","value","tag","fromObj","_extends","Buffer","from","Object","entries","reduce","acc","_ref","_settle","pact","state","s","_Pact","o","bind","v","then","observer","onFulfilled","onRejected","result","callback","e","_this","PAGE_SIZE","BlockHeaderService","db","syncInProgress","openDB","VERSION","upgrade","createObjectStore","keyPath","createIndex","_proto","syncBlocks","Promise","resolve","lastHeight","transaction","store","openCursor","cursor","key","_temp2","fetch","resp","json","blocks","_temp","_do","console","log","t","put","_fetch","_resp$json","length","_catch","error","_finallyRethrows","_wasThrown","_result","setTimeout","reject","isValidRootForHeight","root","get","merkleroot","getHashByHeight","_db$get","getHeightByHash","getFromIndex","_db$getFromIndex","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","TxoStore","accountId","addresses","Set","forEach","i","txos","multiEntry","getTx","fromRemote","_this2","_this2$db2","txn","tx","Transaction","fromBinary","Array","Uint8Array","rawtx","merklePath","MerklePath","proof","all","arrayBuffer","_tx$merklePath$path$","blockHeight","BigInt","path","find","p","offset","status","CONFIRMED","_this2$db","getTxo","_this3$db","searchTxos","lookup","limit","_this4","_exit","_temp6","_result2","results","nextPage","timeEnd","dbkey","toQueryKey","query","IDBKeyRange","bound","time","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_temp5","_for","_asyncIterator","index","iterate","_iterator$next","next","push","timeLog","err","_temp4","_result3","_temp3","_wasThrown2","ingest","_iterator2","_step2","_iterator3","_step3","_temp22","_temp20","_result5","_exit2","_this5","_this5$db2","_temp18","_result6","_temp16","_result8","save","ctx","_step4","_loop","_txo$spend","_txo$block","spent","sort","padStart","has","_ref2","_txo$block2","id","_iterator4","_iteratorAbruptCompletion3","_iteratorError3","_didIteratorError3","_temp15","outputs","_temp11","_iterator3$next","_step3$value","output","lockingScript","toBinary","_script$chunks","_script$chunks2","_script$chunks3","_script$chunks4","_script$chunks5","chunks","op","OP","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","Utils","toBase58Check","parseAddress","parse","_wasThrown5","_temp14","_result9","_temp13","_temp12","_wasThrown6","_iteratorError2","_iteratorAbruptCompletion2","_didIteratorError2","_temp17","inputs","_temp7","_iterator2$next","_step2$value","input","sourceTXID","sourceOutputIndex","sourceTransaction","spends","_wasThrown3","_temp10","_result7","_temp9","_temp8","_wasThrown4","_temp19","target","body","check","step","array","_cycle","_forOf","_this5$db","getKey","_await$_this5$db$getK","_this5$getTx","Error","_temp21","_tx$merklePath$path$2","txHash","_this5$blocks$getHash"],"mappings":"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"}