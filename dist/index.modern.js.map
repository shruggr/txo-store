{"version":3,"file":"index.modern.js","sources":["../src/models/block.ts","../src/models/spend.ts","../src/models/txo.ts","../src/models/txn.ts","../src/block-headers.ts","../src/models/address.ts","../src/index.ts"],"sourcesContent":["\nexport class Block {\n    constructor(public height = Date.now(), public idx = 0n, public hash = '') {}\n\n    toJSON() {\n        return {\n            height: this.height,\n            idx: this.idx.toString(),\n            hash: this.hash,\n        }\n    }\n}","import { Block } from \"./block\";\n\nexport class Spend {\n    constructor(public txid: string, public vin: number, public block?: Block) {}\n\n    toJSON() {\n        return {\n            txid: this.txid,\n            vin: this.vin,\n            block: this.block?.toJSON(),\n        }\n    }\n}","import { Block } from \"./block\"\nimport { IndexData } from \"./index-data\"\nimport type { Indexer } from \"./indexer\"\nimport { Spend } from \"./spend\"\nimport { Buffer } from 'buffer'\n\nexport class Txo {\n    block?: Block\n    spend?: Spend\n    data: { [tag: string]: IndexData } = {}\n    events: string[] = []\n    owner = ''\n\n    constructor(\n        public txid: string,\n        public vout: number,\n        public satoshis: bigint,\n        public script: Uint8Array,\n    ) { }\n\n    static fromObject(obj: any, indexers: Indexer[] = []): Txo {\n        const txo = new Txo(obj.txid, obj.vout, obj.satoshis, obj.script)\n        txo.block = obj.block && new Block(obj.block.height, obj.block.idx, obj.block.hash)\n        txo.spend = obj.spend && new Spend(obj.spend.txid, obj.spend.vin, obj.spend.block && new Block(obj.spend.block.height, obj.spend.block.idx, obj.spend.block.hash))\n        txo.owner = obj.owner\n        for(let idx of indexers) {\n            if (obj.data[idx.tag]) {\n                txo.data[idx.tag] = idx.fromObj(obj.data[idx.tag])\n            }\n        }\n\n        txo.events = obj.events\n        return txo\n    }\n\n    toJSON() {\n        return {\n            ...this,\n            script: Buffer.from(this.script).toString('base64'),\n            satoshis: this.satoshis.toString(),\n            owner: this.owner,\n            data: Object.entries(this.data).reduce((acc: {[tag:string]:any}, [tag, data]) => {\n                acc[tag] = data.data\n                return acc\n            }, {}),\n            events: this.events,\n        }\n    }\n}\n\nexport class TxoLookup {\n    constructor(\n        public indexer: string, \n        public id?: string,\n        public value?: string,\n        public spent?: boolean, \n        public owner?: string\n    ) { }\n\n    toQueryKey(): string {\n        return TxoLookup.buildQueryKey(this.indexer, this.id, this.value, this.spent)\n    }\n\n    static buildQueryKey(tag: string, id?: string, value?: string, spent?: boolean): string {\n        let key = `${tag}`\n        if (id) {\n            key += `:${id}`\n            if (value) {\n                key += `:${value}`\n                if (spent !== undefined) {\n                    key += `:${spent ? '1' : '0'}`\n                }\n            }\n        }\n        return key\n    }\n}\n\nexport interface TxoResults {\n    txos: Txo[]\n    nextPage?: string\n}","import type { Block } from \"./block\"\n\nexport enum TxnStatus {\n    INVALID = -1,\n    PENDING = 0,\n    BROADCASTED = 1,\n    CONFIRMED = 2,\n}\n\nexport interface Txn {\n    txid: string\n    rawtx: Uint8Array\n    proof: Uint8Array\n    block?: Block\n    status: TxnStatus\n}","import type { ChainTracker } from \"@bsv/sdk\";\nimport { openDB, type DBSchema, type IDBPDatabase } from \"@tempfix/idb\";\n\nconst VERSION = 1\nconst PAGE_SIZE = 10000\n\nexport interface BlockHeader {\n    hash: string\n    height: number\n    version: number\n    prevHash: string\n    merkleroot: string\n    time: number\n    bits: number\n    nonce: number\n}\n\nexport interface BlockSchema extends DBSchema {\n    headers: {\n        key: number;\n        value: BlockHeader;\n        indexes: {\n            byHash: string;\n        }\n    }\n}\n\nexport class BlockHeaderService implements ChainTracker{\n    db: Promise<IDBPDatabase<BlockSchema>>\n    syncInProgress = false\n    constructor() {\n        this.db = openDB<BlockSchema>(`blocks`, VERSION, {\n            upgrade(db) {\n                const headers = db.createObjectStore('headers', { keyPath: 'height' })\n                headers.createIndex('byHash', 'hash')\n            }\n        })\n    }\n\n    async syncBlocks() {\n        if (this.syncInProgress) return\n        this.syncInProgress = true\n        let lastHeight = 1\n        const db = await this.db\n        const cursor = await db.transaction('headers').store.openCursor(null, 'prev')\n        if (cursor) {\n            lastHeight = cursor.key > 5 ? cursor.key - 5 : 1\n        }\n\n        try {\n            let resp = await fetch(`https://ordinals.gorillapool.io/api/blocks/list/${lastHeight}?limit=${PAGE_SIZE}`)\n            let blocks = await resp.json() as BlockHeader[]\n            do {\n                console.log('Syncing from', lastHeight)\n                const t = db.transaction('headers', 'readwrite')\n                for (let block of blocks) {\n                    t.store.put(block)\n                    lastHeight = block.height + 1\n                }\n                await t.done\n                resp = await fetch(`https://ordinals.gorillapool.io/api/blocks/list/${lastHeight}?limit=${PAGE_SIZE}`)\n                blocks = await resp.json() as BlockHeader[]\n            } while (blocks.length == PAGE_SIZE)\n        } catch (e) {\n            console.error(e)\n        } finally {\n            this.syncInProgress = false\n            setTimeout(() => this.syncBlocks(), 1000 * 60)\n        }\n    }\n\n    async isValidRootForHeight(root: string, height: number): Promise<boolean> {\n        const db = await this.db\n        const block = await db.get('headers', height)\n        return block?.merkleroot == root\n    }\n\n    async getHashByHeight(height: number): Promise<string | undefined> {\n        const db = await this.db\n        return (await db.get('headers', height))?.hash\n    }\n\n    async getHeightByHash(hash: string): Promise<number | undefined> {\n        const db = await this.db\n        return (await db.getFromIndex('headers', 'byHash', hash))?.height\n    }\n}","import {OP, Utils, type Script} from \"@bsv/sdk\";\n\nexport function parseAddress(script: Script, offset: number = 0): string {\n    if (script.chunks[0 + offset]?.op === OP.OP_DUP &&\n        script.chunks[1 + offset]?.op === OP.OP_HASH160 &&\n        script.chunks[2 + offset]?.data?.length === 20 &&\n        script.chunks[3 + offset]?.op === OP.OP_EQUALVERIFY &&\n        script.chunks[4 + offset]?.op === OP.OP_CHECKSIG\n    ) {\n        return Utils.toBase58Check(script.chunks[2 + offset].data!, [0])\n    }\n    return \"\"\n}","import { MerklePath, Transaction } from \"@bsv/sdk\";\nimport type { Indexer } from \"./models/indexer\";\nimport type { IndexContext } from \"./models/index-context\";\nimport { openDB, type DBSchema, type IDBPDatabase } from \"@tempfix/idb\";\nimport { Txo, TxoLookup, type TxoResults } from \"./models/txo\";\nimport { TxnStatus, type Txn } from \"./models/txn\";\nimport { BlockHeaderService } from \"./block-headers\";\nimport { Block } from \"./models/block\";\nimport { Spend } from \"./models/spend\";\nimport { Buffer } from 'buffer'\nimport { parseAddress } from \"./models/address\";\n\nconst VERSION = 1\n\nexport interface TxoSchema extends DBSchema {\n    txos: {\n        key: [string, number]\n        value: Txo\n        indexes: {\n            events: string\n            owner: string\n        }\n    }\n    txns: {\n        key: string\n        value: Txn\n    }\n}\n\nexport class TxoStore {\n    db: Promise<IDBPDatabase<TxoSchema>>\n    blocks = new BlockHeaderService()\n    constructor(\n        public accountId: string,\n        public indexers: Indexer[] = [],\n        public addresses = new Set<string>()\n    ) {\n        this.indexers.forEach(i => i.addresses = this.addresses)\n        this.db = openDB<TxoSchema>(`txostore-${accountId}`, VERSION, {\n            upgrade(db) {\n                const txos = db.createObjectStore('txos', { keyPath: ['txid', 'vout'] })\n                txos.createIndex('events', 'events', { multiEntry: true })\n                txos.createIndex('owner', 'owner')\n                db.createObjectStore('txns', { keyPath: 'txid' })\n            }\n        })\n    }\n\n    async getTx(txid: string, fromRemote = false): Promise<Transaction | undefined> {\n        let txn = await (await this.db).get('txns', txid)\n        if (txn) {\n            const tx = Transaction.fromBinary(Array.from(new Uint8Array(txn.rawtx)))\n            tx.merklePath = MerklePath.fromBinary(Array.from(txn.proof))\n            return tx\n        }\n        if (!fromRemote) return\n        console.log('Fetching', txid)\n        const [rawtx, proof] = await Promise.all([\n            fetch(`https://junglebus.gorillapool.io/v1/transaction/get/${txid}/bin`)\n                .then(resp => resp.arrayBuffer()),\n            fetch(`https://junglebus.gorillapool.io/v1/transaction/proof/${txid}`)\n                .then(resp => resp.arrayBuffer()),\n        ]);\n        const tx = Transaction.fromBinary(Array.from(new Uint8Array(rawtx)));\n        tx.merklePath = MerklePath.fromBinary(Array.from(new Uint8Array(proof)));\n        txn = {\n            txid,\n            rawtx: new Uint8Array(rawtx),\n            proof: new Uint8Array(proof),\n            block: new Block(\n                tx.merklePath.blockHeight,\n                BigInt(tx.merklePath.path[0].find(p => p.hash == txid)?.offset || 0)\n            ),\n            status: TxnStatus.CONFIRMED,\n        }\n        await (await this.db).put('txns', txn)\n        return tx\n    }\n\n    async getTxo(txid: string, vout: number): Promise<Txo | undefined> {\n        return (await this.db).get('txos', [txid, vout])\n    }\n\n    async searchTxos(lookup: TxoLookup, limit = 10, from?: string): Promise<TxoResults> {\n        const db = await this.db\n        let dbkey = lookup.toQueryKey()\n        const start = from || dbkey\n        const query: IDBKeyRange = IDBKeyRange.bound(start, dbkey + '\\uffff', true, false)\n        const results: TxoResults = { txos: [] }\n        console.time('findTxos')\n        for await (const cursor of db.transaction('txos').store.index('events').iterate(query)) {\n            const txo = Txo.fromObject(cursor.value, this.indexers)\n            results.nextPage = cursor.key\n            if (lookup.owner && txo.owner != lookup.owner) continue\n            results.txos.push(txo)\n            console.timeLog('findTxos', txo.txid, txo.vout)\n            if (results.txos.length >= limit) {\n                console.timeEnd('findTxos')\n                return results\n            }\n        }\n        delete results.nextPage\n        console.timeEnd('findTxos')\n        return results\n    }\n\n    async ingest(tx: Transaction, fromRemote = false): Promise<IndexContext> {\n        const txid = tx.id('hex') as string\n        let block = {\n            height: Date.now(),\n            idx: 0n\n        } as Block\n        if (tx.merklePath) {\n            const txHash = tx.hash('hex')\n            const idx = tx.merklePath.path[0].find(p => p.hash == txHash)?.offset || 0\n            block.height = tx.merklePath.blockHeight\n            block.idx = BigInt(idx)\n            block.hash = (await this.blocks.getHashByHeight(tx.merklePath.blockHeight)) || ''\n        }\n\n        const ctx: IndexContext = {\n            txid,\n            tx,\n            block,\n            spends: [],\n            txos: [],\n        }\n\n        for (const input of tx.inputs) {\n            if (!input.sourceTXID) input.sourceTXID = input.sourceTransaction!.id('hex') as string\n            if (input.sourceTransaction) {\n                if (await (await this.db).getKey('txns', input.sourceTXID)) {\n                    continue\n                }\n                await this.ingest(input.sourceTransaction)\n            } else {\n                input.sourceTransaction = await this.getTx(input.sourceTXID!, fromRemote)\n                if (!input.sourceTransaction) throw new Error(`Failed to get source tx ${input.sourceTXID!}`)\n            }\n        }\n\n        const t = (await this.db).transaction('txos', 'readwrite')\n        for await (const [vin, input] of tx.inputs.entries()) {\n            let data = await t.store.get([input.sourceTXID!, input.sourceOutputIndex])\n            const spend = data ?\n                Txo.fromObject(data, this.indexers) :\n                new Txo(\n                    input.sourceTXID!,\n                    input.sourceOutputIndex,\n                    BigInt(input.sourceTransaction!.outputs[input.sourceOutputIndex]!.satoshis!),\n                    Buffer.from(input.sourceTransaction!.outputs[input.sourceOutputIndex]!.lockingScript.toBinary()),\n                )\n\n            spend.spend = new Spend(txid, vin, block)\n            ctx.spends.push(spend)\n            t.store.put(spend)\n        }\n\n        for await (const [vout, output] of tx.outputs.entries()) {\n            let data = await t.store.get([txid, vout])\n            let txo: Txo\n            if(data) {\n                txo = Txo.fromObject(data)\n            } else {\n                const script = output.lockingScript.toBinary()\n                // console.log('script', output.lockingScript.toBinary())\n                txo = new Txo(\n                   txid,\n                   vout,\n                   BigInt(output.satoshis!),\n                   new Uint8Array(script),\n               )\n            }\n            if(!txo.owner) {\n                txo.owner = parseAddress(output.lockingScript, 0)\n            }\n\n            txo.block = block\n            txo.events = [];\n            ctx.txos.push(txo)\n            this.indexers.forEach(i => {\n                const data = i.parse && i.parse(ctx, vout)\n                if (data) {\n                    txo.data[i.tag] = data\n                }\n            })\n        }\n        this.indexers.forEach(i => i.save && i.save(ctx))\n        for (const txo of ctx.txos) {\n            txo.events = []\n            const spent = txo.spend ? '1' : '0'\n            const sort = (txo.spend?.block?.height || txo.block?.height || Date.now()).toString(16).padStart(8, '0')\n            if (txo.owner && this.addresses.has(txo.owner)) {\n                Object.entries(txo.data).forEach(([tag, data]) => {\n                    data.events.forEach(e => {\n                        txo.events.push(`${tag}:${e.id}:${e.value}:${spent}:${sort}:${txo.block?.idx}:${txo.vout}:${txo.satoshis}`)\n                    })\n                })\n            }\n            t.store.put(txo)\n        }\n        await t.done\n        return ctx\n    }\n}"],"names":["Block","constructor","height","Date","now","idx","hash","this","toJSON","toString","Spend","txid","vin","block","_this$block","Txo","vout","satoshis","script","spend","data","events","owner","fromObject","obj","indexers","txo","tag","fromObj","_extends","Buffer","from","Object","entries","reduce","acc","TxnStatus","BlockHeaderService","db","syncInProgress","openDB","upgrade","createObjectStore","keyPath","createIndex","syncBlocks","lastHeight","cursor","transaction","store","openCursor","key","resp","fetch","blocks","json","console","log","t","put","done","length","e","error","setTimeout","isValidRootForHeight","root","get","merkleroot","getHashByHeight","_await$db$get","getHeightByHash","_await$db$getFromInde","getFromIndex","parseAddress","offset","_script$chunks","_script$chunks2","_script$chunks3","_script$chunks4","_script$chunks5","chunks","op","OP","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","Utils","toBase58Check","TxoStore","accountId","addresses","Set","forEach","i","txos","multiEntry","getTx","fromRemote","_tx$merklePath$path$","txn","tx","Transaction","fromBinary","Array","Uint8Array","rawtx","merklePath","MerklePath","proof","Promise","all","then","arrayBuffer","blockHeight","BigInt","path","find","p","status","CONFIRMED","getTxo","searchTxos","lookup","limit","dbkey","toQueryKey","query","IDBKeyRange","bound","results","time","_iteratorError","_iteratorAbruptCompletion","_didIteratorError","_step","_iterator","_asyncIterator","index","iterate","next","value","nextPage","push","timeLog","timeEnd","err","return","ingest","id","_tx$merklePath$path$2","txHash","ctx","spends","input","inputs","sourceTXID","sourceTransaction","getKey","Error","_iteratorError2","_iteratorAbruptCompletion2","_didIteratorError2","_step2","_iterator2","sourceOutputIndex","outputs","lockingScript","toBinary","_iteratorError3","_iteratorAbruptCompletion3","_didIteratorError3","_iterator3","_step3","output","parse","save","_txo$spend","_txo$block","spent","sort","padStart","has","_txo$block2"],"mappings":"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"}